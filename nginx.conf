
#user  nobody;
worker_processes  4;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$request_time" "$upstream_response_time"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    geoip2 /usr/share/GeoIP/GeoLite2-City.mmdb{
           $geoip2_data_country_code default=unkown country iso_code;
           $geoip2_data_country_name default=unkown country names en;
           $geoip2_data_subdivision_name default=unkown subdivisions 0 names zh-CN;
           $geoip2_data_city_name default=unkown city names zh-CN;
           $geoip2_data_city_geoname_id default=0 city geoname_id;
    }

    #geoip_city            /usr/share/GeoIP/GeoLiteCity.dat;
    lua_shared_dict dogs 10m;
    lua_shared_dict rank 10m;
    server {
        listen       8080;
        server_name  localhost;

        #charset koi8-r;
        proxy_set_header X_COUNTRY_NAME $geoip2_data_country_name;
        proxy_set_header X_CITY_NAME $geoip2_data_city_name;
        #access_log  logs/host.access.log  main;

        location /get_rank {
                 content_by_lua_file /opt/nginx_lua/get_rank.lua;
        }

        location /set {
                 content_by_lua_block{
                        local dogs = ngx.shared.dogs
                        dogs:set("Jim",0)
                        ngx.say("STORED")
                 }
        }

        location /get {
                 content_by_lua_block{
                        local dogs = ngx.shared.dogs
                        ngx.say(dogs:get("Jim"))
                 }
        }

        location /incr {
                 content_by_lua_block{
                        local dogs = ngx.shared.dogs
                        local newval, err = dogs:incr("Jim",1)
                        ngx.say(newval)
                 }
        }

        location /addr {
                 content_by_lua_block{
                        local headers = ngx.req.get_headers()
                        ngx.say(headers['Accept-Language'])
                        --ngx.say(ngx.var.geoip2_data_city_name)
                 }
        }

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
