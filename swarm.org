* Load banlance outside swarm
https://docs.docker.com/engine/swarm/ingress/#publish-a-port-for-tcp-only-or-udp-only
**Publish a port for a service

Use the --publish flag to publish a port when you create a service. target is used to specify the port inside the container, and published is used to specify the port to bind on the routing mesh. If you leave off the published port, a random high-numbered port is bound for each service task. You will need to inspect the task to determine the port.

$ docker service create \
  --name <SERVICE-NAME> \
  --publish published=<PUBLISHED-PORT>,target=<CONTAINER-PORT> \
  <IMAGE>

    Note: The older form of this syntax is a colon-separated string, where the published port is first and the target port is second, such as -p 8080:80. The new syntax is preferred because it is easier to read and allows more flexibility.

The <PUBLISHED-PORT> is the port where the swarm makes the service available. If you omit it, a random high-numbered port is bound. The <CONTAINER-PORT> is the port where the container listens. This parameter is required.

For example, the following command publishes port 80 in the nginx container to port 8080 for any node in the swarm:

$ docker service create \
  --name my-web \
  --publish published=8080,target=80 \
  --replicas 2 \
  nginx

When you access port 8080 on any node, Docker routes your request to an active container. On the swarm nodes themselves, port 8080 may not actually be bound, but the routing mesh knows how to route the traffic and prevents any port conflicts from happening.

The routing mesh listens on the published port for any IP address assigned to the node. For externally routable IP addresses, the port is available from outside the host. For all other IP addresses the access is only available from within the host.
** Bypass the routing mesh

You can bypass the routing mesh, so that when you access the bound port on a given node, you are always accessing the instance of the service running on that node. This is referred to as host mode. There are a few things to keep in mind.

    If you access a node which is not running a service task, the service will not be listening on that port. It is possible that nothing will be listening, or that a completely different application will be listening.

    If you expect to run multiple service tasks on each node (such as when you have 5 nodes but run 10 replicas), you cannot specify a static target port. Either allow Docker to assign a random high-numbered port (by leaving off the target), or ensure that only a single instance of the service runs on a given node, by using a global service rather than a replicated one, or by using placement constraints.

To bypass the routing mesh, you must use the long --publish service and set mode to host. If you omit the mode key or set it to ingress, the routing mesh is used. The following command creates a global service using host mode and bypassing the routing mesh.

$ docker service create --name dns-cache \
  --publish published=53,target=53,protocol=udp,mode=host \
  --mode global \
  dns-cache
  
 ** Configure an external load balancer
 *** Without the routing mesh
 To use an external load balancer without the routing mesh, set --endpoint-mode to dnsrr instead of the default value of vip. In this case, there is not a single virtual IP. Instead, Docker sets up DNS entries for the service such that a DNS query for the service name returns a list of IP addresses, and the client connects directly to one of these. You are responsible for providing the list of IP addresses and ports to your load balancer. 
 See Configure service discovery <https://docs.docker.com/engine/swarm/networking/#configure-service-discovery>.
 
 * Configure service discovery
 
 * Ansible Puppet Chef
 
 * Deploy to swarm
 https://docs.docker.com/engine/reference/commandline/stack_deploy/
 ** Specfic nodes to deplay
 *** Add labels for node
 https://docs.docker.com/engine/swarm/manage-nodes/#add-or-remove-label-metadata
  docker node update --label-add foo --label-add bar=baz node-1
 *** Use label  
 https://docs.docker.com/engine/reference/commandline/service_create/#specify-service-constraints-constraint
 node.labels.zuul=true
 node.labels.boss=true
 
 

